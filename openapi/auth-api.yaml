openapi: 3.0.3
info:
  title: Project Management System - Auth API
  description: Authentication and authorization API for the Project Management System
  version: 1.0.0
  contact:
    name: Project Management Team
    email: support@projectmanagement.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api
    description: Development server
  - url: https://api.projectmanagement.com/api
    description: Production server

paths:
  /auth/signup:
    post:
      summary: Sign up a new user
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            example:
              username: "newuser"
              email: "newuser@example.com"
              password: "securepassword123"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: Sign in a user
      description: Authenticate user and return session token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              username: "admin"
              password: "admin123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: Logout user
      description: Logout the current user (client should discard token)
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      summary: Get current user
      description: Get the current authenticated user's information
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/tokens:
    get:
      summary: Get user's API tokens
      description: Get all API tokens for the authenticated user
      tags:
        - API Tokens
      security:
        - BearerAuth: []
      responses:
        '200':
          description: API tokens retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create API token
      description: Create a new API token for the authenticated user
      tags:
        - API Tokens
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
            example:
              name: "My API Token"
              expires_in_hours: 4
      responses:
        '201':
          description: API token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/tokens/{id}:
    delete:
      summary: Revoke API token
      description: Revoke a specific API token
      tags:
        - API Tokens
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Token ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Token revoked successfully
        '400':
          description: Invalid token ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        username:
          type: string
          example: "admin"
        email:
          type: string
          format: email
          example: "admin@example.com"
        role:
          type: string
          enum: [superuser, sysadmin, localadmin, user, guest]
          example: "superuser"
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    CreateUserRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "newuser"
        email:
          type: string
          format: email
          example: "newuser@example.com"
        password:
          type: string
          minLength: 8
          example: "securepassword123"

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "admin"
        password:
          type: string
          example: "admin123"

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        session_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expires_at:
          type: string
          format: date-time
          example: "2024-01-02T00:00:00Z"

    CreateTokenRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "My API Token"
        expires_in_hours:
          type: integer
          minimum: 1
          maximum: 24
          default: 4
          example: 4

    TokenResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "660e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          example: "My API Token"
        token:
          type: string
          example: "a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456"
        expires_at:
          type: string
          format: date-time
          example: "2024-01-01T04:00:00Z"
        last_used_at:
          type: string
          format: date-time
          nullable: true
          example: "2024-01-01T02:30:00Z"
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid request data"
        message:
          type: string
          example: "Detailed error message"
        code:
          type: integer
          example: 400

