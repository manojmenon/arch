version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: project-management-db
    env_file:
      - env.database
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-project_management}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./../backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "${OTEL_COLLECTOR_PORT_GRPC:-4317}:4317"   # OTLP gRPC receiver
      - "${OTEL_COLLECTOR_PORT_HTTP:-4318}:4318"   # OTLP HTTP receiver
      - "${OTEL_COLLECTOR_PORT_PROMETHEUS:-8889}:8889"   # Prometheus metrics
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: project-management-backend
    env_file:
      - ../backend/env.development
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-password}
      - DB_NAME=${POSTGRES_DB:-project_management}
      - OTEL_ENDPOINT=http://otel-collector:4318/v1/traces
      - ENVIRONMENT=development
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      otel-collector:
        condition: service_started
    command: ["./mcp"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=http://localhost:8080
        - VITE_APP_ENVIRONMENT=development
    container_name: project-management-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:

